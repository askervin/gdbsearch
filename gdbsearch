#!/usr/bin/env python

# Copyright (C) 2011  Antti Kervinen  antti.kervinen@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Usage: gdbsearch [options] gdb_command [measure [paths_to_subroutines]]

    gdb_command starts debugger with debugged program

    measure (optional) specifies the function to be used
        for evaluating the debugged program state after every step
        taken by the debugger. Available measuring functions:
        - %s

    paths_to_subroutines is a list of paths where paths are
        lists of indexes of "step" commands in gdb. If an index
        is i, gdb will be given i "step-finish" commands before "step".
        Lists are given in Python format. Examples: 
        "[[]]" debugging is started on only one function: main()
        "[[2], [0, 1]]" will debug the two functions reached by
        1) step-finish - step-finish - step, and
        2) step-finish - step-finish - step in the start of main in gdb.

    Options:
        -d  print data instead of html (the default is: %s)

        -e <expression>
            track change deeper in the code if the expression
            evaluates to True. Two variables defined for expression:
            n: new measurement, p: previous measurement.
            Default expression: "%s".

        -l <data file>
            load old data from <data file> and render it into html
            without running gdb.

        -o <output directory>
            write html files to output directory.
            Default output directory: "%s".

Examples:

    gdbsearch "gdb ./myapp" private_mem
        searches myapp program lines where memory consumption
        (in terms of private memory) increases

    gdbsearch -e "n > p + 100000" "gdb --args ./myapp myarg" io_rchar
        runs "./myapp myarg" and searches program lines which cause
        reading more than 100,000 bytes from any io source.

"""

_output_directory = "/tmp"
_trace_if_true_func_expr = "n > p"
_print_data = False

import subprocess
import select
import getopt
import cgi
import sys
import os

# Measuring functions receives gdb process object (with pipes) and pid
# as parameters. They return a numeric value. A measuring function is
# called before and after every step of analysed program code. Name
# function that measures xyz as "measure_xyz". It will be listed in
# "-h" output, and used when gdbsearch is started with "xyz" as a
# measuring function command line parameter.

def _sum_integers(filename, line_prefix, field_index):
    total = 0
    for line in file(filename):
        if line.startswith(line_prefix):
            total += int(line.split()[field_index])
    return total
 
def measure_private_dirty(gdb, pid):
    return _sum_integers("/proc/%s/smaps" % (pid,),
                         "Private_Dirty:", 1)

def measure_private_mem(gdb, pid):
    return _sum_integers("/proc/%s/smaps" % (pid,),
                         "Private_", 1)

def measure_io_rchar(gdb, pid):
    return _sum_integers("/proc/%s/io" % (pid,),
                         "rchar:", 1)

def measure_io_wchar(gdb, pid):
    return _sum_integers("/proc/%s/io" % (pid,),
                         "wchar:", 1)

def measure_fd_count(gdb, pid):
    return len(os.walk("/proc/%s/fd" % (pid,)).next()[2])


def print_usage():
    l = [s[8:] for s in globals().keys() if s.startswith("measure_")]
    l.sort()
    s = '\n        - '.join(l)
    print __doc__ % (s, _print_data, _trace_if_true_func_expr, _output_directory)

def error(msg):
    sys.stderr.write('ERROR: ' + msg + '\n')
    sys.exit(1)

def flush():
    sys.stdout.flush()

def read_answer(pipe, maxlines = -1, timeout = 5):
    """maxlines -1 means read until nothing to read until timeout"""
    lines = []
    while 1:
        readable, _, _ = select.select([pipe], [], [], timeout)
        if not readable:
            break
        else:
            if not lines: lines.append("")
            lines[-1] += pipe.read(1)
            if lines[-1][-1] == '\n':
                if len(lines) == maxlines: break
                else: lines.append("")
            if lines[-1] == '(gdb) ': 
                break # got prompt, nothing more is coming
    return lines

def expect_prompt(answer):
    if len(answer) == 0 or not answer[-1].startswith('(gdb)'):
        error('Did not receive the gdb prompt. Got:\n' + ''.join(answer))

def start_gdb(gdb_command):
    gdb = subprocess.Popen(gdb_command, shell=True,
                           stdin=subprocess.PIPE,
                           stdout=subprocess.PIPE)
    answer = read_answer(gdb.stdout)
    expect_prompt(answer)
    return gdb

def run_to_main(gdb):
    gdb.stdin.write('break main\n')
    bp_row, gdb_prompt = read_answer(gdb.stdout, 5)
    if not bp_row.startswith('Breakpoint 1 at'):
        error("Could not set breakpoint to main. Got error:\n" + bp_row)
    gdb.stdin.write('run\n')
    rows = read_answer(gdb.stdout, 6, 8)
    expect_prompt(rows)

def get_pid_of_debugged_process(gdb):
    gdb.stdin.write('info proc\n')
    rows = read_answer(gdb.stdout, 5)
    if not len(rows) == 5 or not rows[0].startswith('process'):
        error("Could not read process id. Answer started with:\n" + "".join(rows))
    expect_prompt(rows)
    return rows[0].split()[1]

def get_backtrace(gdb):
    gdb.stdin.write('bt\n')
    rows = read_answer(gdb.stdout)
    expect_prompt(rows)
    return rows[:-1]

def get_frame(gdb):
    gdb.stdin.write('info frame\n')
    rows = read_answer(gdb.stdout)
    expect_prompt(rows)
    try: return rows[0].split()[5]
    except: return None

def next_row(gdb):
    depth_before = len(get_backtrace(gdb))

    gdb.stdin.write('step\n')
    rows = read_answer(gdb.stdout)

    depth_now = len(get_backtrace(gdb))
    while depth_now > depth_before:
        gdb.stdin.write('finish\n')
        rows = read_answer(gdb.stdout)
        depth_now = len(get_backtrace(gdb))

    if len(rows) > 1:
        codeline = rows[-2]
    else:
        codeline = ""
    expect_prompt(rows)
    return codeline

def step_into_subroutine(gdb):
    gdb.stdin.write('step\n')
    rows = read_answer(gdb.stdout)
    expect_prompt(rows)

def quit_gdb(gdb):
    gdb.stdin.write('quit\n')
    try:
        gdb.stdin.write('y\n')
    except: pass


def step_and_measure_current_func(gdb, pid, measuring_func):
    bt = get_backtrace(gdb)
    orig_bt_length = len(bt) # if this changes, we are out of the func
    orig_frame = get_frame(gdb)
    print "measuring:", orig_frame
    flush()
    data = measuring_func(gdb, pid)
    rows_and_data = [(bt[0].strip(), data, "")]
    while 1:
        codeline = next_row(gdb)
        bt = get_backtrace(gdb)
        if (len(bt) < 1 or
            len(bt) != orig_bt_length or
            get_frame(gdb) != orig_frame):
            # we are out of the frame!
            break
        data = measuring_func(gdb, pid)
        rows_and_data.append((bt[0].strip(), data, codeline))
    return rows_and_data

def find_need_for_deeper_checks(rows_and_data, trace_if_true_func):
    steps = []
    step = 0
    if len(rows_and_data) == 0: return steps
    previous_value = rows_and_data[0][1]
    for row_and_data in rows_and_data[1:]:
        current_value = row_and_data[1]
        if trace_if_true_func(current_value, previous_value):
            try:
                file_and_row = row_and_data[0].rsplit(" at ", 1)[1]
                if search_file(file_and_row.split(":")[0]):
                    steps.append((step, current_value, previous_value))
                else:
                    print "File not found: '%s', not going deeper" % (file_and_row.split(":")[0],)
            except:
                print "FILENAME PARSING FAILED FROM '%s'" % (row_and_data[0],)
        previous_value = current_value
        step += 1
    return steps

def walk_to_func(gdb, deeper_steps):
    step_index_in_current_func = 0
    my_deeper_steps = [s for s in deeper_steps] # copy
    print "walking:", deeper_steps
    while my_deeper_steps:
        next_deep_step = my_deeper_steps.pop(0)
        while step_index_in_current_func < next_deep_step:
            next_row(gdb)
            step_index_in_current_func += 1
        # Now we are ready to take step into subroutine. Make sure that
        # we enter one by checking backtrace
        bt_in_current_func = get_backtrace(gdb)
        step_into_subroutine(gdb)
        bt_in_new_func = get_backtrace(gdb)
        if bt_in_new_func[0].startswith(bt_in_current_func[0].split(':')[0]):
            # function didn't really change. we have traced this
            # deeper_steps path to the bottom.
            print "STEP IN FAILED: expected start:", bt_in_current_func[0].split(':')[0]
            print "STEP IN FAILED: observed start:", bt_in_new_func[0]
            return False
        step_index_in_current_func = 0
    return True

_search_file_path = []
_search_file_cache = {}
try: 
    dirs = [s[4:] for s in file(os.path.expanduser("~/.gdbinit")).readlines() if s.startswith("dir")]
    _search_file_path = [os.path.expanduser(d).strip() for d in dirs]
except Exception, e: print "Cannot read .gdbinit for locating source codes.", e
def search_file(filename):
    if not filename in _search_file_cache:
        if os.access(filename, os.R_OK):
            _search_file_cache[filename] = filename
        else:
            for p in _search_file_path:
                if os.access(p + os.sep + filename, os.R_OK):
                    _search_file_cache[filename] = p + os.sep + filename
                break
    if not filename in _search_file_cache:
        return None
    return _search_file_cache[filename]

_all_findings = {}
_depth_fullpath_file_row_values = []
_file_not_found = {}
def add_to_all_findings(filename, rownumber, previous_value, current_value, current_path, step):
    if not filename in _all_findings:
        if filename in _file_not_found: return
        readable_filename = search_file(filename)
        if not readable_filename:
            _file_not_found[filename]=1
            return
        _all_findings[filename] = []
    _all_findings[filename].append((rownumber, previous_value, current_value, current_path))
    _depth_fullpath_file_row_values.append((len(current_path), current_path + [step], search_file(filename), rownumber, previous_value, current_value))

def report_findings(results, current_path, deeper_checks):
    for dc in deeper_checks:
        step, current_value, previous_value = dc
        codeline = results[step][2]
        file_and_row = results[step][0]

        try:
            file_and_row = file_and_row.rsplit(" at ", 1)[1]
            filename,rownumber = file_and_row.split(":")
            add_to_all_findings(filename, int(rownumber), previous_value, current_value, current_path, step)
        except ValueError:
            print "ADDING RESULT ROW FAILED:", file_and_row

        print "%s -> %s %s %s" % (previous_value, current_value,
                               file_and_row, codeline)
    flush()

_html_print_bar_length=20
def print_html():
    def steppath2filename(steppath):
        pstr = str(steppath).replace(", [",".").replace(",","-").translate(None, "[] ")
        return "gdbsearch%s.html" % (pstr,)
    def html_ascii(f, scores, totalscore, line, hyperrefs, rowid):
        scorebar = sum(scores) * _html_print_bar_length / totalscore
        scorestr = (scorebar * "#") + ( (_html_print_bar_length - scorebar) * "-")
        if rowid != None:
            scorestr = scorestr[:-2]
            scoretitle = ""
            for i, score in enumerate(scores):
                scoretitle += "frame %s: %s  " % (i+1, score)
            if hyperrefs != None:
                scorestr = '<a href="%s" title="%s" name="%s">%s</a>' % (
                    steppath2filename(hyperrefs[0]), scoretitle, rowid, scorestr)
            scorestr += '<a href="#%s">&lt</a>' % (rowid - 1,)
            scorestr += '<a href="#%s">&gt</a>' % (rowid + 1,)
        ws = " " * (len(line) - len(line.lstrip()))
        if hyperrefs:
            if len(hyperrefs)==1:
                linestr = ws.replace(" ", "&nbsp;") + ('<a href="%s">' % (
                        steppath2filename(hyperrefs[0]),)) + cgi.escape(line.lstrip()).replace(" ", "&nbsp;") + '</a>'
            else:
                linestr = ws.replace(" ", "&nbsp;") + cgi.escape(line.lstrip()).replace(" ", "&nbsp;")
                for i, hyperref in enumerate(hyperrefs):
                    linestr += '<a href="%s">[frame %s]</a>&nbsp;' % (steppath2filename(hyperref), i+1)
        else:
            linestr = ws.replace(" ", "&nbsp;") + cgi.escape(line.lstrip()).replace(" ", "&nbsp;")
        f.write('<kbd>%s</kbd><kbd>%s</kbd>' % (scorestr, linestr))
        f.write('<br>\n')
            
    def print_code_html(filename, data):
        data.sort()
        try: totalvalue = sum([d[1] for d in data])
        except: import pdb; pdb.set_trace()
        nextline, nextvalue, nextpath = data.pop(0)
        f = file(_output_directory + steppath2filename(nextpath[:-1]), "w")
        f.write('<html><body><kbd>gdbsearch file:%s, <a name="#0" href="#1"><kbd>first hit</kbd></a></kbd><br>\n' % (filename,))
        rowid = 0
        for lineindex, line in enumerate(file(filename).xreadlines()):
            lineno = lineindex + 1
            if lineno != nextline:
                html_ascii(f, [0], 1, line.rstrip(), None, None)
            else:
                nextvalues = [nextvalue]
                nextpaths = [nextpath]
                while data and data[0][0] == nextline: # more data on the same line
                    _, nextvalue, nextpath = data.pop(0)
                    nextvalues.append(nextvalue)
                    nextpaths.append(nextpath)
                rowid += 1
                html_ascii(f, nextvalues, totalvalue, line.rstrip(), nextpaths, rowid)
                try: nextline, nextvalue, nextpath = data.pop(0)
                except: nextline = -1
        f.write('</body></html>\n')

    if not _depth_fullpath_file_row_values: return
    _depth_fullpath_file_row_values.sort()

    depth, fullpath, filename, lineno, previous_value, current_value = _depth_fullpath_file_row_values[0]
    current_depth = depth
    current_path = fullpath[:-1]
    current_filename = filename
    print_data = []
    while _depth_fullpath_file_row_values:
        depth, fullpath, filename, lineno, previous_value, current_value = _depth_fullpath_file_row_values.pop(0)
        if fullpath[:-1] != current_path: # current_file handled, moving to next. print gathered data
            if print_data:
                print_code_html(current_filename, print_data)
                print_data = []
            current_depth = depth
            current_path = fullpath[:-1]
            current_filename = filename
        print_data.append( (lineno, current_value - previous_value, fullpath) )
    if print_data: print_code_html(current_filename, print_data)

def main(argv):
    global _depth_fullpath_file_row_values
    global _output_directory
    global _trace_if_true_func_expr
    global _print_data
    track_if_true = lambda curr, prev: curr > prev

    try:
        opts, remainder = getopt.getopt(argv[1:], 'dhl:e:o:', [])
    except Exception, e:
        print_usage()
        print e
        sys.exit(1)

    for opt, arg in opts:
        if opt == '-d':
            _print_data = True
        if opt == '-e':
            _trace_if_true_func_expr = arg
        elif opt == '-h':
            print_usage()
            return
        elif opt == '-l':
            _depth_fullpath_file_row_values = eval(file(arg).read())
        elif opt == "-o":
            _output_directory = arg

    if _output_directory and _output_directory[-1] != os.sep:
        _output_directory += os.sep
        if not os.access(_output_directory, os.W_OK):
            try: os.makedirs(_output_directory)
            except Exception, e:
                print "Cannot write to '%s'." % (_output_directory,)
                print "    (%s)" % (e,)
                sys.exit(1)

    if _depth_fullpath_file_row_values:
        print_html()
        return

    try:
        func_source = 'lambda n, p: ' + _trace_if_true_func_expr
        trace_if_true_func = eval(func_source)
    except:
        error('Illegal check function "%s".\n"' +
              'Example: "n > p + 100" is true if new measurement\n' +
              'was greater than previous by 100')

    # 1st parameter: gdb command
    try:
        gdb_command = remainder[0]
        if gdb_command.startswith('-'): raise Exception()
    except:
        print_usage()
        error("Gdb command missing.")

    # 2nd parameter: measuring function (optional)
    if len(remainder) > 1:
        try:
            measuring_func = eval("measure_" + remainder[1])
            if type(measuring_func) != type(main): raise Exception()
        except:
            print_usage()
            error('Incorrect measure "%s"' % (remainder[1],))
    else:
        measuring_func = measure_private_mem

    # 3rd parameter: paths to measured subroutines
    if len(remainder) > 2:
        try:
            paths_to_interesting_subroutines = eval(remainder[2])
            if type(paths_to_interesting_subroutines) != type([]): raise Exception()
        except:
            error('Invalid paths to subroutines')
    else:    
        # path to main is []: no steps to subroutines
        paths_to_interesting_subroutines = [[]]

    # step, measure and report
    while paths_to_interesting_subroutines:

        current_path = paths_to_interesting_subroutines.pop(0)

        gdb = start_gdb(gdb_command)
        run_to_main(gdb)
        pid = get_pid_of_debugged_process(gdb)
        
        if walk_to_func(gdb, current_path):
            results = step_and_measure_current_func(gdb, pid, measuring_func)
            deeper_checks = find_need_for_deeper_checks(results, trace_if_true_func)
            report_findings(results, current_path, deeper_checks)

            paths_to_interesting_subroutines += [current_path + [dc[0]] for dc in deeper_checks]

        if not _print_data: print_html()

        quit_gdb(gdb)

    if _print_data:
        file(_output_directory + "gdbsearch.data","w").write(repr(_depth_fullpath_file_row_values))

if __name__ == '__main__':
    main(sys.argv)
